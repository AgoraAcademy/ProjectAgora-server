# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse200(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, expires_in: float=None, refresh_token: str=None, openid: str=None, scope: str=None, unionid: str=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger

        :param access_token: The access_token of this InlineResponse200.  # noqa: E501
        :type access_token: str
        :param expires_in: The expires_in of this InlineResponse200.  # noqa: E501
        :type expires_in: float
        :param refresh_token: The refresh_token of this InlineResponse200.  # noqa: E501
        :type refresh_token: str
        :param openid: The openid of this InlineResponse200.  # noqa: E501
        :type openid: str
        :param scope: The scope of this InlineResponse200.  # noqa: E501
        :type scope: str
        :param unionid: The unionid of this InlineResponse200.  # noqa: E501
        :type unionid: str
        """
        self.swagger_types = {
            'access_token': str,
            'expires_in': float,
            'refresh_token': str,
            'openid': str,
            'scope': str,
            'unionid': str
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'expires_in': 'expires_in',
            'refresh_token': 'refresh_token',
            'openid': 'openid',
            'scope': 'scope',
            'unionid': 'unionid'
        }

        self._access_token = access_token
        self._expires_in = expires_in
        self._refresh_token = refresh_token
        self._openid = openid
        self._scope = scope
        self._unionid = unionid

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self) -> str:
        """Gets the access_token of this InlineResponse200.


        :return: The access_token of this InlineResponse200.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token: str):
        """Sets the access_token of this InlineResponse200.


        :param access_token: The access_token of this InlineResponse200.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def expires_in(self) -> float:
        """Gets the expires_in of this InlineResponse200.


        :return: The expires_in of this InlineResponse200.
        :rtype: float
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in: float):
        """Sets the expires_in of this InlineResponse200.


        :param expires_in: The expires_in of this InlineResponse200.
        :type expires_in: float
        """

        self._expires_in = expires_in

    @property
    def refresh_token(self) -> str:
        """Gets the refresh_token of this InlineResponse200.


        :return: The refresh_token of this InlineResponse200.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token: str):
        """Sets the refresh_token of this InlineResponse200.


        :param refresh_token: The refresh_token of this InlineResponse200.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def openid(self) -> str:
        """Gets the openid of this InlineResponse200.


        :return: The openid of this InlineResponse200.
        :rtype: str
        """
        return self._openid

    @openid.setter
    def openid(self, openid: str):
        """Sets the openid of this InlineResponse200.


        :param openid: The openid of this InlineResponse200.
        :type openid: str
        """

        self._openid = openid

    @property
    def scope(self) -> str:
        """Gets the scope of this InlineResponse200.


        :return: The scope of this InlineResponse200.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope: str):
        """Sets the scope of this InlineResponse200.


        :param scope: The scope of this InlineResponse200.
        :type scope: str
        """

        self._scope = scope

    @property
    def unionid(self) -> str:
        """Gets the unionid of this InlineResponse200.


        :return: The unionid of this InlineResponse200.
        :rtype: str
        """
        return self._unionid

    @unionid.setter
    def unionid(self, unionid: str):
        """Sets the unionid of this InlineResponse200.


        :param unionid: The unionid of this InlineResponse200.
        :type unionid: str
        """

        self._unionid = unionid
