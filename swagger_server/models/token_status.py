# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TokenStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, learner_id: str=None, token: str=None, expire_by: str=None, refreshed: bool=None):  # noqa: E501
        """TokenStatus - a model defined in Swagger

        :param learner_id: The learner_id of this TokenStatus.  # noqa: E501
        :type learner_id: str
        :param token: The token of this TokenStatus.  # noqa: E501
        :type token: str
        :param expire_by: The expire_by of this TokenStatus.  # noqa: E501
        :type expire_by: str
        :param refreshed: The refreshed of this TokenStatus.  # noqa: E501
        :type refreshed: bool
        """
        self.swagger_types = {
            'learner_id': str,
            'token': str,
            'expire_by': str,
            'refreshed': bool
        }

        self.attribute_map = {
            'learner_id': 'learnerID',
            'token': 'token',
            'expire_by': 'expireBy',
            'refreshed': 'refreshed'
        }

        self._learner_id = learner_id
        self._token = token
        self._expire_by = expire_by
        self._refreshed = refreshed

    @classmethod
    def from_dict(cls, dikt) -> 'TokenStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TokenStatus of this TokenStatus.  # noqa: E501
        :rtype: TokenStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def learner_id(self) -> str:
        """Gets the learner_id of this TokenStatus.


        :return: The learner_id of this TokenStatus.
        :rtype: str
        """
        return self._learner_id

    @learner_id.setter
    def learner_id(self, learner_id: str):
        """Sets the learner_id of this TokenStatus.


        :param learner_id: The learner_id of this TokenStatus.
        :type learner_id: str
        """

        self._learner_id = learner_id

    @property
    def token(self) -> str:
        """Gets the token of this TokenStatus.


        :return: The token of this TokenStatus.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this TokenStatus.


        :param token: The token of this TokenStatus.
        :type token: str
        """

        self._token = token

    @property
    def expire_by(self) -> str:
        """Gets the expire_by of this TokenStatus.


        :return: The expire_by of this TokenStatus.
        :rtype: str
        """
        return self._expire_by

    @expire_by.setter
    def expire_by(self, expire_by: str):
        """Sets the expire_by of this TokenStatus.


        :param expire_by: The expire_by of this TokenStatus.
        :type expire_by: str
        """

        self._expire_by = expire_by

    @property
    def refreshed(self) -> bool:
        """Gets the refreshed of this TokenStatus.


        :return: The refreshed of this TokenStatus.
        :rtype: bool
        """
        return self._refreshed

    @refreshed.setter
    def refreshed(self, refreshed: bool):
        """Sets the refreshed of this TokenStatus.


        :param refreshed: The refreshed of this TokenStatus.
        :type refreshed: bool
        """

        self._refreshed = refreshed
